syntax = "proto3";
package io.ringbroker.api;

option java_package = "io.ringbroker.api";
option java_outer_classname = "BrokerApi";

message Envelope {
  uint64 correlationId = 100;

  oneof kind {
    Message          publish = 1;
    BatchMessage     batch = 2;
    FetchRequest     fetch = 3;
    CommitRequest    commit = 4;
    CommittedRequest committed = 5;
    SubscribeRequest subscribe = 6;
    PublishReply     publishReply = 10;
    FetchReply       fetchReply = 11;
    CommitAck        commitAck = 12;
    CommittedReply   committedReply = 13;
    MessageEvent     messageEvent = 14;

    ReplicationAck   replication_ack = 15;
  }
}

message Message {
  string topic = 1;
  int32  retries = 2;
  bytes  payload = 3;
  bytes  key = 4;
  int32  partition_id = 5;
}

message PublishReply {
  bool success = 1;
  string error = 2;
}

message CommitRequest {
  string topic = 1;
  string group = 2;
  int32  partition = 3;
  int64  offset = 4;
}
message CommitAck {
  bool success = 1;
}
message CommittedRequest {
  string topic = 1;
  string group = 2;
  int32  partition = 3;
}
message CommittedReply {
  int64 offset = 1;
}

message SubscribeRequest {
  string topic = 1;
  string group = 2;
  int64  offset = 3;
}
message MessageEvent {
  string topic = 1;
  int64  offset = 2;
  bytes  key = 3;
  bytes  payload = 4;
}

message FetchRequest {
  string topic = 1;
  string group = 2;
  int32  partition = 3;
  int64  offset = 4;
  int32  maxMessages = 5;
}

message BatchMessage {
  repeated Message messages = 1;
}

message FetchReply {
  repeated MessageEvent messages = 1;
}

message ReplicationAck {
  enum Status {
    SUCCESS = 0;
    ERROR_PERSISTENCE_FAILED = 1;
    ERROR_INVALID_REQUEST = 2;
    ERROR_REPLICA_NOT_READY = 3;
    ERROR_UNKNOWN = 4;
  }

  Status status = 1;
  string error_message = 2;
  int32 replica_node_id = 3;
  int64 offset = 4;
}